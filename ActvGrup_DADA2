#DADA2
###Instalar librerias

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
if (!requireNamespace("dada2", quietly = TRUE))
  BiocManager::install("dada2", version = "3.20")
####Cargar librerias

library("dada2")
library("stats")
library("BiocParallel")
library("R.utils")

####DADA2 PIPELINE 2.0 

#Establecer ruta a archivos limpios

setwd("G:/My Drive/Maestria/Base de Datos_ Secuenciacion/Lecturas FASTq - Copy")
getwd()

path <- ("G:/My Drive/Maestria/Base de Datos_ Secuenciacion/Lecturas FASTq - Copy")
list.files(path)


#Los archivos forward y reverse tienen el formato: _1.fastaq.gz y _2.fastaq.gz

fnFs <- sort(list.files(path, pattern="_1.fastq.gz", full.names = TRUE)) #para correr despues de trimmomatic_
print(fnFs)

fnRs <- sort(list.files(path, pattern="_2.fastq.gz", full.names = TRUE))
print(fnRs)

#Extraer los nombres de las muestras 
baseF <- sub("_1.fastq.gz$", "", basename(fnFs))
baseR <- sub("_2.fastq.gz$", "", basename(fnRs))
paired <- intersect(baseF, baseR)
print(paired)

list.files(path, pattern="_1.fastq.gz")
list.files(path, pattern="_2.fastq.gz")
sample.names <- sapply(paired, function(x) {
  parts <- unlist(strsplit(x, "_"))
  paste(parts[1], parts[2], sep="_")
})

print(sample.names)

#Inspect read quality profiles

plotQualityProfile(fnFs[1:12])
plotQualityProfile(fnRs[1:12])
dev.off ()


# Trimming
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
                     truncLen=c(240, 200),
                     maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
                     compress=TRUE, multithread=FALSE)                  
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)

#Plot error
plotErrors(errF, nominalQ=TRUE)
dev.off ()

##Dereplicate (this step does not be included in version 1.16 but it is in version 1.8)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
save.image(file="G:/My Drive/Maestria/Base de Datos_ Secuenciacion/Lecturas FASTq - Copy")

##Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names

#Sample inference
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)  #continuando el proceso luego de la dereplicacion aÃ±adir pool=TRUE
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)

save.image(file="G:/My Drive/Maestria/Base de Datos_ Secuenciacion/Lecturas FASTq - Copy")


dadaPFs <- dada(derepFs, err=errF, multithread=TRUE, pool=TRUE)  
dadaPRs <- dada(derepRs, err=errR, multithread=TRUE, pool=TRUE)

#Inspect returned class object
dadaFs[[9]]
dadaRs[[9]]
dadaPFs[[9]]
dadaPRs[[9]]

#Merge paired reads to obtain the full denoised sequences
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)  #con dereplicacion
mergersP <- mergePairs(dadaPFs, derepFs, dadaPRs, derepRs, verbose=TRUE)

# Inspect the merger data.frame from the first sample
head(mergers[[9]])
head(mergersP[[9]])

#Construct sequence table
seqtab <- makeSequenceTable(mergers)
seqtabP <- makeSequenceTable(mergersP)

## The sequences being tabled vary in length.
dim(seqtab)
dim(seqtabP)

#Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
table(nchar(getSequences(seqtabP)))

#Remove chimeras
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)

seqtab.nochimP <- removeBimeraDenovo(seqtabP, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochimP)
sum(seqtab.nochimP)/sum(seqtabP)

#Track reads trough pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))

getN <- function(x) sum(getUniques(x))
trackP <- cbind(out, sapply(dadaPFs, getN), sapply(dadaPRs, getN), sapply(mergersP, getN), rowSums(seqtab.nochimP))

# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)

colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
track

colnames(trackP) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")

rownames(trackP) <- sample.names
head(trackP)
trackP

#saveRDS
saveRDS(track,"G:/My Drive/Maestria/Base de Datos_ Secuenciacion/Lecturas FASTq - Copy")
save.image(file="G:/My Drive/Maestria/Base de Datos_ Secuenciacion/Lecturas FASTq - Copy")

